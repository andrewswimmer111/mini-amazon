-- Users / Accounts
CREATE TABLE Users (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    address TEXT NOT NULL,
    balance DECIMAL(12, 2) NOT NULL CHECK (balance >= 0)
);

-- Product category
CREATE TYPE product_cat AS ENUM ('A', 'B', 'C', 'D');

CREATE TABLE Products (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(12,2) NOT NULL CHECK (price >= 0),
    category product_cat NOT NULL
);

CREATE TABLE Cart (
    account_id INT NOT NULL,
    product_id INT NOT NULL,
    seller_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    PRIMARY KEY (account_id, product_id, seller_id),
    FOREIGN KEY (account_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id),
    FOREIGN KEY (seller_id) REFERENCES Users(id)
);

CREATE TABLE Inventory (
    seller_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity >= 0),
    PRIMARY KEY (seller_id, product_id),
    FOREIGN KEY (seller_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);

-- Purchases (order-level)
CREATE TABLE Purchases (
    purchase_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    address TEXT NOT NULL,
    date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    buyer_id INT NOT NULL,
    fulfillment_status INT NOT NULL DEFAULT 0 CHECK (fulfillment_status IN (0, 1)),
    FOREIGN KEY (buyer_id) REFERENCES Users(id)
);

-- Ledger (per-item history) 
CREATE TABLE Ledger (
    purchase_id INT NOT NULL,
    seller_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    fulfillment_status INT NOT NULL DEFAULT 0 CHECK (fulfillment_status IN (0, 1)),
    PRIMARY KEY (purchase_id, seller_id, product_id),
    FOREIGN KEY (purchase_id) REFERENCES Purchases(purchase_id),
    FOREIGN KEY (seller_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);